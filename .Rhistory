# get p-value from Z score
p.value <- pnorm(z.score, mean = prePB.mean, sd = prePB.sd, lower.tail = TRUE)
dtag_raw <- read.csv("/Users/gagled01/morganLab/NSD2/data/dTAG_raw_expr.csv")
colnames(dtag_raw) <- c("Genes", "dtag8_t0_r1", "dtag8_t0_r2", "dtag11_t0_r1", "dtag11_t0_r2",
"dtag8_t21_r1", "dtag8_t21_r2", "dtag11_t21_r1", "dtag11_t21_r2") # just the t0 samples
dtag_clean <- dtag_raw %>%
dplyr::select("Genes", "dtag8_t0_r1", "dtag8_t0_r2", "dtag11_t0_r1", "dtag11_t0_r2") %>%
#column_to_rownames(var = "Genes") %>%
rowwise() %>%
mutate(dtag8.mean = mean(c(dtag8_t0_r1, dtag8_t0_r2)), # calculate means for each cell type
dtag11.mean = mean(c(dtag11_t0_r1, dtag11_t0_r2))) %>%
dplyr::filter(dtag8.mean > 10 | dtag11.mean > 10)
jerome2021_norm <- read.delim("/Users/gagled01/morganLab/NSD2/data/GSE148924_raw_count.txt")
# subset and rename rows for import to sce
jerome2021_norm_sub <- jerome2021_norm %>%
dplyr::select(name, MBC1, MBC2, MBC3, prePB1, prePB2, prePB3, PB1, PB2, PB3, PC1, PC2, PC3) %>%
distinct(name, .keep_all = T)
jerome_mean_clean <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") %>% # filter out rows where difference between min and max is less than 2x
dplyr::filter(name %in% dtag_clean$Genes)
dtag_jerome_overlap <- intersect(jerome_mean_clean$name,
dtag_clean$Genes)
jerome_dtag_overlap <- jerome_mean_clean %>%
dplyr::filter(name %in% dtag_jerome_overlap)
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_dtag_overlap))) {
if (jerome_dtag_overlap$MBC.mean[i] >= 0.5*jerome_dtag_overlap$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_dtag_overlap$name[i])
}
}
for (i in 1:length(rownames(jerome_dtag_overlap))) {
if (jerome_dtag_overlap$prePB.mean[i] >= 0.5*jerome_dtag_overlap$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_dtag_overlap$name[i])
}
}
for (i in 1:length(rownames(jerome_dtag_overlap))) {
if (jerome_dtag_overlap$PB.mean[i] >= 0.5*jerome_dtag_overlap$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_dtag_overlap$name[i])
}
}
for (i in 1:length(rownames(jerome_dtag_overlap))) {
if (jerome_dtag_overlap$PC.mean[i] >= 0.5*jerome_dtag_overlap$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_dtag_overlap$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list, shape = "ellipse"), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/NSD2_InternalTest_Jerome_FullDTAGList_VennDiagram.svg", device = "svg", height = 8, width = 8)
jerome2021_norm <- read.delim("/Users/gagled01/morganLab/NSD2/data/GSE148924_raw_count.txt")
# subset and rename rows for import to sce
jerome2021_norm_sub <- jerome2021_norm %>%
dplyr::select(name, MBC1, MBC2, MBC3, prePB1, prePB2, prePB3, PB1, PB2, PB3, PC1, PC2, PC3) %>%
distinct(name, .keep_all = T)
# Mutate the shit out of this thing
library(DatabionicSwarm) # use this package for a function to get relative difference between 2 values. anything with relativedifference > 0.6666667 = 2FC change
# MBC excluded list
jerome_mbc_list <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
dplyr::filter(MBC.mean > 10) %>% # select only rows with at least 30 average expression in cell type of interest
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
dim(jerome_mbc_list)
# prePB excluded list
jerome_prePB_list <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
dplyr::filter(prePB.mean > 10) %>% # select only rows with at least 30 average expression in cell type of interest
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
dim(jerome_prePB_list)
# PB excluded list
jerome_PB_list <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
dplyr::filter(PB.mean > 10) %>% # select only rows with at least 30 average expression in cell type of interest
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
dim(jerome_PB_list)
# PC excluded list
jerome_PC_list <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
dplyr::filter(PC.mean > 10) %>% # select only rows with at least 30 average expression in cell type of interest
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
# MBC LIST
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_mbc_list))) {
if (jerome_mbc_list$MBC.mean[i] >= 0.5*jerome_mbc_list$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_mbc_list$name[i])
}
}
for (i in 1:length(rownames(jerome_mbc_list))) {
if (jerome_mbc_list$prePB.mean[i] >= 0.5*jerome_mbc_list$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_mbc_list$name[i])
}
}
for (i in 1:length(rownames(jerome_mbc_list))) {
if (jerome_mbc_list$PB.mean[i] >= 0.5*jerome_mbc_list$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_mbc_list$name[i])
}
}
for (i in 1:length(rownames(jerome_mbc_list))) {
if (jerome_mbc_list$PC.mean[i] >= 0.5*jerome_mbc_list$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_mbc_list$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/MBC-list_Venn.svg", device = "svg", height = 8, width = 8)
# prePB LIST
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_prePB_list))) {
if (jerome_prePB_list$MBC.mean[i] >= 0.5*jerome_prePB_list$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_prePB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_prePB_list))) {
if (jerome_prePB_list$prePB.mean[i] >= 0.5*jerome_prePB_list$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_prePB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_prePB_list))) {
if (jerome_prePB_list$PB.mean[i] >= 0.5*jerome_prePB_list$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_prePB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_prePB_list))) {
if (jerome_prePB_list$PC.mean[i] >= 0.5*jerome_prePB_list$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_prePB_list$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/prePB-list_Venn.svg", device = "svg", height = 8, width = 8)
# PB LIST
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_PB_list))) {
if (jerome_PB_list$MBC.mean[i] >= 0.5*jerome_PB_list$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_PB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PB_list))) {
if (jerome_PB_list$prePB.mean[i] >= 0.5*jerome_PB_list$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_PB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PB_list))) {
if (jerome_PB_list$PB.mean[i] >= 0.5*jerome_PB_list$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_PB_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PB_list))) {
if (jerome_PB_list$PC.mean[i] >= 0.5*jerome_PB_list$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_PB_list$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/PB-list_Venn.svg", device = "svg", height = 8, width = 8)
# PC LIST
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_PC_list))) {
if (jerome_PC_list$MBC.mean[i] >= 0.5*jerome_PC_list$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_PC_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PC_list))) {
if (jerome_PC_list$prePB.mean[i] >= 0.5*jerome_PC_list$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_PC_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PC_list))) {
if (jerome_PC_list$PB.mean[i] >= 0.5*jerome_PC_list$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_PC_list$name[i])
}
}
for (i in 1:length(rownames(jerome_PC_list))) {
if (jerome_PC_list$PC.mean[i] >= 0.5*jerome_PC_list$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_PC_list$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/PC-list_Venn.svg", device = "svg", height = 8, width = 8)
# mbc
mbc.total <- sum(1870,2275,3018,689,973,1081,11,20,318)
3018/mbc.total
2275/mbc.total
1870/mbc.total
689/mbc.total
973/mbc.total
1081/mbc.total
11/mbc.total
20/mbc.total
318/mbc.total
# prepb
prepb.total <- sum(4017,2259,1192,694,1148,1320,403,23,30)
4017/prepb.total
2259/prepb.total
1192/prepb.total
694/prepb.total
1148/prepb.total
1320/prepb.total
403/prepb.total
23/prepb.total
30/prepb.total
# pb
pb.total <- sum(3404,2046,1032,679,1118,1313,509,35,47)
3404/pb.total
2046/pb.total
1032/pb.total
679/pb.total
1118/pb.total
1313/pb.total
509/pb.total
35/pb.total
47/pb.total
# pc
pc.total <- sum(3227,1996,1028,658,1063,1306,519,24,73)
3227/pc.total
1996/pc.total
1028/pc.total
658/pc.total
1063/pc.total
1306/pc.total
519/pc.total
24/pc.total
73/pc.total
jerome2021_norm_sub
yubaogenes <- read.table('/Users/gagled01/morganLab/NSD2/data/Consensus NSD2 target genes - down-regulated, for total mRNA.txt')
yubaogenes <- yubaogenes$V1
jerome2021_norm <- read.delim("/Users/gagled01/morganLab/NSD2/data/GSE148924_raw_count.txt")
# subset and rename rows for import to sce
jerome2021_norm_sub <- jerome2021_norm %>%
dplyr::select(name, MBC1, MBC2, MBC3, prePB1, prePB2, prePB3, PB1, PB2, PB3, PC1, PC2, PC3) %>%
dplyr::filter(name %in% yubaogenes)
distinct(name, .keep_all = T)
head(jerome2021_norm)
# subset and rename rows for import to sce
jerome2021_norm_sub <- jerome2021_norm %>%
dplyr::select(name, MBC1, MBC2, MBC3, prePB1, prePB2, prePB3, PB1, PB2, PB3, PC1, PC2, PC3) %>%
dplyr::filter(name %in% yubaogenes) %>%
distinct(name, .keep_all = T)
jerome2021_norm_sub
jerome_mean_clean <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
# initialize empty vectors for each cell type
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$MBC.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$prePB.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$PB.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$PC.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_mean_clean$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list, shape = "ellipse"), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/SystematicVennDiagram_dTAGgenes.svg", device = "svg", height = 8, width = 8)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/SystematicVennDiagram_dTAGgenes.svg", device = "svg", height = 8, width = 8)
total <- sum(53,31,22,2,11,7,9,4,1)
total
total <- sum(53,31,22,2,11,7,9,4,1)
53/total
31/total
22/total
2/total
11/total
7/total
9/total
4/total
1/total
total <- sum(4454,2549,2400,749,1212,1450,615,105,47)
4454/total
2549/total
2400/total
749/total
1212/total
1450/total
615/total
105/total
47/total
total[1]
total <- sum(3093,1769,986,569,936,1033,167,28,18)
3093/total
1769/total
986/total
569/total
936/total
1033/total
167/total
28/total
18/total
jerome_mean_clean
yubaogenes <- read.table('/Users/gagled01/morganLab/NSD2/data/Consensus NSD2 target genes - down-regulated, for total mRNA.txt')
yubaogenes <- yubaogenes$V1
jerome2021_norm <- read.delim("/Users/gagled01/morganLab/NSD2/data/GSE148924_raw_count.txt")
# subset and rename rows for import to sce
jerome2021_norm_sub <- jerome2021_norm %>%
dplyr::select(name, MBC1, MBC2, MBC3, prePB1, prePB2, prePB3, PB1, PB2, PB3, PC1, PC2, PC3) %>%
dplyr::filter(name %in% yubaogenes) %>%
distinct(name, .keep_all = T)
dim(jerome2021_norm_sub)
jerome_mean_clean <- jerome2021_norm_sub %>%
rowwise() %>%
mutate(MBC.mean = mean(c(MBC1, MBC2, MBC3)), # calculate means for each cell type
prePB.mean = mean(c(prePB1, prePB2, prePB3)),
PB.mean = mean(c(PB1, PB2, PB3)),
PC.mean = mean(c(PC1, PC2, PC3))) %>%
dplyr::filter(MBC.mean > 10 | prePB.mean > 10 | PB.mean > 10 | PC.mean > 10) %>% # remove rows with no mean expr values above 30
mutate(min_val = pmin(MBC.mean, prePB.mean, PB.mean, PC.mean), # compute min and max values in these means
max_val = pmax(MBC.mean, prePB.mean, PB.mean, PC.mean)) %>%
mutate(keep_or_not = if_else(abs(RelativeDifference(min_val, max_val)) > 0.6666667, # identify rows where difference between min and max is less than 2x
"keep", "exclude")) %>%
dplyr::select(name, MBC.mean, prePB.mean, PB.mean, PC.mean, min_val, max_val, keep_or_not) %>%
dplyr::filter(keep_or_not == "keep") # filter out rows where difference between min and max is less than 2x
dim(jerome_mean_clean)
mbc.venn.list <- character()
prePB.venn.list <- character()
PB.venn.list <- character()
PC.venn.list <- character()
# Need to run separate for loops for each cell type cuz idk how to do it for all at once lol
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$MBC.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
mbc.venn.list <- c(mbc.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$prePB.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
prePB.venn.list <- c(prePB.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$PB.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
PB.venn.list <- c(PB.venn.list, jerome_mean_clean$name[i])
}
}
for (i in 1:length(rownames(jerome_mean_clean))) {
if (jerome_mean_clean$PC.mean[i] >= 0.5*jerome_mean_clean$max_val[i]) {
PC.venn.list <- c(PC.venn.list, jerome_mean_clean$name[i])
}
}
eulerr_list <- list(MBC = mbc.venn.list,
prePB = prePB.venn.list,
PB = PB.venn.list,
PC = PC.venn.list)
eulerr_plot <- plot(euler(eulerr_list), quantities = T, fills = c("#7CAE00", '#F8766D', "#00BFC4", "#C77CFF"), alpha = 0.4)
ggsave(eulerr_plot, file="/Users/gagled01/morganLab/NSD2/figures/SystematicVennDiagram_dTAGgenes.svg", device = "svg", height = 8, width = 8)
mbc.total
# mbc
mbc.values <- c(1870,2275,3018,689,973,1081,11,20,318)
mbc.total <- sum(mbc.values)
mbc.values <- c(3465,2502,2400,740,1064,1225,370,36,19)
mbc.total <- sum(mbc.values)
mbc.values[1]/mbc.total
mbc.values[2]/mbc.total
mbc.values[3]/mbc.total
mbc.values[4]/mbc.total
mbc.values[5]/mbc.total
mbc.values[6]/mbc.total
mbc.values[7]/mbc.total
mbc.values[8]/mbc.total
mbc.values[9]/mbc.total
prepb.values <- c(4454,2512,1505,742,1212,1431,487,49,28)
prepb.total <- sum(prepb.values)
prepb.values[1]/prepb.total
prepb.values[2]/prepb.total
prepb.values[3]/prepb.total
prepb.values[4]/prepb.total
prepb.values[5]/prepb.total
prepb.values[6]/prepb.total
prepb.values[7]/prepb.total
prepb.values[8]/prepb.total
prepb.values[9]/prepb.total
pb.values <- c(3740,2213,1308,725,1194,1417,591,71,47)
pb.total <- sum(pb.values)
pb.values[1]/pb.total
pb.values[2]/pb.total
pb.values[3]/pb.total
pb.values[4]/pb.total
pb.values[5]/pb.total
pb.values[6]/pb.total
pb.values[7]/pb.total
pb.values[8]/pb.total
pb.values[9]/pb.total
pc.values <- c(3582,2186,1304,702,1144,1430,611,105,34)
pc.total <- sum(pc.values)
pc.values[1]/pc.total
pc.values[2]/pc.total
pc.values[3]/pc.total
pc.values[4]/pc.total
pc.values[5]/pc.total
pc.values[6]/pc.total
pc.values[7]/pc.total
pc.values[8]/pc.total
pc.values[9]/pc.total
